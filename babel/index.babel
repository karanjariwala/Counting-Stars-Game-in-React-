var  possibleCombinationSum = function(arr, n) {
  if (arr.indexOf(n) >= 0) { return true; }
  if (arr[0] > n) { return false; }
  if (arr[arr.length - 1] > n) {
    arr.pop();
    return possibleCombinationSum(arr, n);
  }
  var listSize = arr.length, combinationsCount = (1 << listSize)
  for (var i = 1; i < combinationsCount ; i++ ) {
    var combinationSum = 0;
    for (var j=0 ; j < listSize ; j++) {
      if (i & (1 << j)) { combinationSum += arr[j]; }
    }
    if (n === combinationSum) { return true; }
  }
  return false;
};

const Stars = props => {
  // const numberOfStars= 1+Math.floor(Math.random()*9);
  return (
    <div className="col-5">
      {_.range(props.numberOfStars).map(i => (
        <i id={i} className="fa fa-star" />
      ))}

    </div>
  );
};

const Button = props => {
  let button;
  switch (props.isAnswerCorrect) {
    case true:
      button = (
        <button className="btn btn-success" onClick={()=>{props.acceptAnswer();props.updateDoneStatus()}}>
          <i className="fa fa-check" />
        </button>
      );
      break;
    case false:
      button = (
        <button className="btn btn-danger">
          {" "}<i className="fa fa-times" />
        </button>
      );
      break;
    default:
      button = (
        <button
          className="btn"
          disabled={props.selectedNumbers.length === 0}
          onClick={props.checkAnswer}
          >
          {" "}=
        </button>
        
      );
      break;
                               }
  return (
    <div className="col-2 text-center">
      {button}
      <br/><br/>
      <button className="btn btn-warning btn-sm" onClick={()=>{props.redraw(props.redraws);props.updateDoneStatus()}} disabled={props.redraws===0}> <i className="fa fa-refresh">{props.redraws}</i></button>
    </div>
  );
};

const Answer = props => {
  return (
    <div className="col-5">
      {props.selectedNumbers.map((number, i) => (
        <span id={i} onClick={() => props.unSelectNumber(number)}>
          {number}{" "}
        </span>
      ))}
    </div>
  );
};

const Number = props => {
  const numberClassName = number => {
        if (props.usedNumbers.indexOf(number) >= 0) {
      return "used";
    }
    if (props.selectedNumbers.indexOf(number) >= 0) {
      return "selected";
    }
  };
  return (
    <div className="card text-center">
      <div>
        {Number.list.map((number, i) => (
          <span
            id={i}
            className={numberClassName(number)}
            onClick={() => {
              props.selectNumber(number);
            }}
            >
            {number}
          </span>
        ))}
      </div>
    </div>
  );
};
Number.list = _.range(1, 10);

const DoneFrame=(props)=>{
  return(
    <div className="text-center">
      <br/>
      <h1> {props.doneStatus}</h1>
      <button className="btn btn-secondary" onClick={()=>{props.resetGame()}}>Play Again</button>
      </div>
  )
}

class Game extends React.Component {
  static randomNumber(){return 1 + Math.floor(Math.random() * 9)};
  static initialState(){return {selectedNumbers: [],
      numberOfStars: Game.randomNumber(),
      answerIsCorrect: null,
      usedNumbers:[],
      redraw:7,
      doneStatus:null,}
                       }
  constructor(props) {
    super(props);

    this.state = Game.initialState();
  }
  resetGame(){
    this.setState(Game.initialState())
  }
  
  updateDoneStatus(){
    console.log('updatefunction')
    this.setState(prevState=>{
      if(prevState.usedNumbers.length===9){
        return{doneStatus:'You Won!'}
      }
      console.log(prevState.redraw)
      console.log(prevState.usedNumbers+prevState.numberOfStars+'passed to possible Solutions')
      if(prevState.redraw===0&&!this.possibleSolutions(prevState))
      {
      return {doneStatus:'Game Over!'}
    }
    
    })
  }
  possibleSolutions({numberOfStars,usedNumbers}){
    console.log('possibleSolution')
    const possibleNumbers=_.range(1,10).filter(number=>usedNumbers.indexOf(number)===-1)
    let k =possibleCombinationSum(possibleNumbers,numberOfStars);
    console.log(k,possibleNumbers,numberOfStars)
    return k
    
  }
  checkAnswer() {
    this.setState(prevState => ({
      answerIsCorrect: prevState.numberOfStars ===
      prevState.selectedNumbers.reduce((acc, num) => acc + num, 0)
    }));
  }
  
  acceptAnswer(){
   
    this.setState(prevState=>({usedNumbers:prevState.usedNumbers.concat(prevState.selectedNumbers), selectedNumbers: [],
      numberOfStars: Game.randomNumber(),
      answerIsCorrect: null,}))
  }
  selectNumber(clickedNumber) {
       if (this.state.usedNumbers.indexOf(clickedNumber) >= 0) {
      return;
    }
    if (this.state.selectedNumbers.indexOf(clickedNumber) >= 0) {
      return;
    }

    console.log("here");
    this.setState(prevState => ({
      selectedNumbers: prevState.selectedNumbers.concat(clickedNumber),
      answerIsCorrect: null
    }));
  }
  // unselectNumber(k){}
  unSelectNumber(clickedNumber) {
    console.log(clickedNumber);
    this.setState(prevState => ({
      selectedNumbers: prevState.selectedNumbers.filter(
        number => number !== clickedNumber
      ),
      answerIsCorrect: null
    }));
  }
  redraw(redraw){
    if(redraw>0){
    this.setState(prevState=>({
        selectedNumbers: [],
      numberOfStars:Game.randomNumber(),
      answerIsCorrect:null,
      redraw:prevState.redraw-1,
    }))
  }
  }

  render() {
    const { selectedNumbers, numberOfStars, answerIsCorrect,usedNumbers,redraw,doneStatus } = this.state;
    return (
      <div className="container">
        <h3>Counting Stars</h3>
        <hr />
        <div className="row">
          <Stars numberOfStars={numberOfStars} />
          <Button
            selectedNumbers={selectedNumbers}
            checkAnswer={this.checkAnswer.bind(this)}
            isAnswerCorrect={answerIsCorrect}
            acceptAnswer={this.acceptAnswer.bind(this)}
            redraw={this.redraw.bind(this)}
            redraws={redraw}
            updateDoneStatus={this.updateDoneStatus.bind(this)}
            />
          <Answer
            unSelectNumber={this.unSelectNumber.bind(this)}
            selectedNumbers={selectedNumbers}
            />
        </div>
        <br />
        {doneStatus?
        <DoneFrame doneStatus={doneStatus} resetGame={this.resetGame.bind(this)}/>
        :<Number
          selectedNumbers={selectedNumbers}
          selectNumber={this.selectNumber.bind(this)}
          usedNumbers={usedNumbers}
          />}
      </div>
    );
  }
}

class App extends React.Component {
  render() {
    return (
      <div>
        <Game />
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById("App"));
